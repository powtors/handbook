---
title: Programação Orientada a Objetos
date: 2024-11-20
---

A programação orientada a objetos difere da procedural sobre sua linha de pensamento.
Em linguagens procedurais temos apenas tarefas executadas em ordem, todas diferentes umas das outras.
Já nas orientadas a objetos, começamos a pensar em algo que executa outro.
Podemos imaginar um animal, que come, bebe e emite som.
Proceduralmente definiríamos assim:

> [!NOTE]
> Para entender melhor sobre programação procedural, veja a [última publicação](/procedural)

## Proceduralmente

```c
struct Animal {
  enum {
    MIADO,
    LATIDO,
  } som;
};

void animal_emitir_som(Animal animal);

int main(void) {
  Animal gato = { MIADO };
  Animal cachorro = { LATIDO };

  animal_emitir_som(gato);
  animal_emitir_som(cachorro);

  return 0;
}
```

Observe que o animal é diferente, e a função que emite som é a mesma.

Agora, na linguagem [Java](https://pt.wikipedia.org/wiki/Java_(linguagem_de_programação)), o mesmo programa seria escrito assim:

## Orientado a Objetos

```java
public abstract class Animal {
  public abstract void emitir_som();
}

public class Gato extends Animal {
  public void emitir_som() {
    // mia
  }
}

public class Cachorro extends Animal {
  public void emitir_som() {
    // late
  }
}

public class Main {
  public static void main(String[] args) {
    Animal gato = new Gato();
    Animal cachorro = new Cachorro();

    gato.emitir_som();
    cachorro.emitir_som();
  }
}
```

A função `main` representa igualmente ao `main` da linguagem C,
já sobre o `Animal`, percebemos que agora o som é emitido por ele mesmo, não por um emissor externo.

A grande diferença aqui é que invertemos a ordem dos *estados*. Antes, tínhamos


## Conclusão

Com isso, aprendemos como um programa é estruturado na linguagem Java,
o que são objetos, como o estado é manipulado por linguagens orientadas a objetos,
...

Veja outros artigos sobre linguagens de programação:

- [Procedural](/procedural)
- [Funcional](/functional)
